# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    instrucciones                                      :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: jrollon- <jrollon-@student.42madrid.com    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/04/24 14:30:42 by jrollon-          #+#    #+#              #
#    Updated: 2025/04/24 14:46:57 by jrollon-         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

CONSIDERACIONES CHATGPT:
1. Parsers y tokens.
	Dividir el input del user como ls -l | grep txt > out.txt
	en tokens y luego construir una estructura para interpretarlo
2. Redirección de pipes.
	Entender como funcion dup2, pipe, fork y execve
3. Builtins
	Comandos como cd, exit, export, pwd hay que implementarlos
	sin execve. Mejor hacerlos aparte en ficheros c. y probar
4. Variables de entorno.
	Usar envp del main, y gestionar nuestras propias variables (Manuel,
	puso dos que no se podian destruir) con export y unset
5. Señales. 
	Control+c, control+D, control+\ tienen que comportarse como Bash.
6. Sin errores de valgrind. Norminette y sanitizer

####################
INSTRUCCIONES 42 ###
####################

1. Debe mostrar una entrada (prompt)
	readline(), rl_on_new_line(), rl_redisplay(), rl_replace_line()
	CUIDADO!!! readline(); puede producir leaks que no se necesitan arreglar

2. Debe tener un historial funcional
	add_history(), rl_clear_history()

3. Buscar y ejecutar el ejecutable correcto (basado en PATH o mediante rutas relativas o absolutas)

4. permitido 1 variable global para indicar recepción de una señal. QUIZA MEJOR USAR LA VARIABLE
	CONTEXT PARA PASARLE LOS DATOS DE ESTRUCTURAS QUE CREEMOS.

5. NO interprestar comillas sin cerrar, o caracteres especiales (\, ;)

6. Gestionar que la ' evite que el shell interprete metacaracteres en la secuencia entrecomillada (???!)'

7. Gestionar que la " evite que el shell interpreste metacaracteres en la secuencia entrecomillada excepto el $"

8. Implementar redericcionamientos:
	< debe redirigir a input
	> debe redirigir a output
	<< debe recibir un delimitador, depués de leer del input de la fuenta actual hasta que una linea que contenga solo
		el delimitador aparezca. Peor no necesita actualizar el historial. (???!!)
	>> debe redirigir el output en modo append (???!!)

9. Implementar pipes (|)

10. Gestionar variables de entorno $(seguidos de chars) que deberán expandirse a sus valores (??!)

11. Gestionar $? que deberá expandirse al estado de salida del comando más reciente ejecutado en la pipeline (??!)

12. Gestionar Ctrl-C, Ctrl-D, Ctrl-\ que deberá funcionar como en BASH!!

13. Cuando sea interactivo
	Ctrl - C -> imprime una nueva entrada en una linea nueva
	Ctrl - D -> terminal el shell
	Ctrl - \ -> no hace nada

14. Implementar los built-ins
	* echo -n
	* cd solo con la ruta relativa o absoluta
	* pwd sin opciones
	* export sin opciones
	* unset sin opciones
	* env sin opciones o argumentos
	* exit sin opciones



